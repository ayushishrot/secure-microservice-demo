name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WORKING_DIRECTORY: app

jobs:
  # Static Code Analysis
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
        continue-on-error: true

      - name: Run tests (if available)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -d "src/__tests__" ] || [ -d "test" ] || [ -d "tests" ]; then
            npm test || true
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Run Semgrep
        run: |
          python -m pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json ./app
          semgrep --config=auto --sarif --output=semgrep-results.sarif ./app
          
      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ${{ env.WORKING_DIRECTORY }}
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.sources=src
            -Dsonar.exclusions=node_modules/**,coverage/**,*.test.js,**/*.test.js
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        continue-on-error: true

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Docker Security Analysis
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: [static-analysis, secrets-scan]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        id: build
        with:
          context: ./app
          file: ./app/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner in table format
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Run Dockle for Docker image linting
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest \
            --exit-code 1 \
            --exit-level WARN \
            ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov against Docker Compose
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./app
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif
          check: CKV_DOCKER_2,CKV_DOCKER_3,CKV_DOCKER_4,CKV_DOCKER_5,CKV_DOCKER_6,CKV_DOCKER_7,CKV_DOCKER_8,CKV_DOCKER_9,CKV_DOCKER_10
          skip_check: CKV_DOCKER_1
          soft_fail: false

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Hadolint for Dockerfile linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: false

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  # Security Gate - Only proceed if all security checks pass
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [static-analysis, secrets-scan, docker-security, infrastructure-scan]
    if: always()
    steps:
      - name: Check Security Status
        run: |
          if [[ "${{ needs.static-analysis.result }}" != "success" ]]; then
            echo "❌ Static analysis failed"
            exit 1
          fi
          if [[ "${{ needs.secrets-scan.result }}" != "success" ]]; then
            echo "❌ Secrets scan failed"
            exit 1
          fi
          if [[ "${{ needs.docker-security.result }}" != "success" ]]; then
            echo "❌ Docker security scan failed"
            exit 1
          fi
          if [[ "${{ needs.infrastructure-scan.result }}" != "success" ]]; then
            echo "❌ Infrastructure scan failed"
            exit 1
          fi
          echo "✅ All security gates passed"

  # Build and Push - Only if security gates pass
  build-and-push:
    name: Build and Push to Registry
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Post-deployment security verification
  post-deployment-security:
    name: Post-Deployment Security Verification
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Final Trivy scan of pushed image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Container Image Signing with Cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, post-deployment-security]
    if: always()
    steps:
      - name: Notify on Success
        if: needs.build-and-push.result == 'success' && needs.post-deployment-security.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully"
          echo "🔒 Security checks passed"
          echo "📦 Image pushed to registry"
          echo "🔐 Image signed with Cosign"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Pipeline failed"
          echo "🔍 Check the security scan results"
          echo "🛡️ Fix security issues before deployment"